<input id="pac-input" class="controls" type="text" placeholder="Enter a location">
<div id="type-selector" class="controls">
  <input type="radio" name="type" id="changetype-all" checked="checked">
  <label for="changetype-all">All</label>
  <input type="radio" name="type" id="changetype-establishment">
  <label for="changetype-establishment">Establishments</label>
  <input type="radio" name="type" id="changetype-address">
  <label for="changetype-address">Addresses</label>
  <input type="radio" name="type" id="changetype-geocode">
  <label for="changetype-geocode">Geocodes</label>
</div>
<div id="map"></div><div class="container">
	<div class="row">
		<div class="col-sm-6 col-sm-offset-3">
			<%= @itinerary.title %>
			<%= @itinerary.description %>
		    <%= link_to '', edit_itinerary_path(@itinerary), class: 'glyphicon glyphicon-pencil' %> 
		</div>
	</div>
	<div class="row">
		<div class="col-sm-4 col-lg-3 well">
			<%= form_for ([@user, @itinerary, @itinerary.items.build]) do |f| %>
			<div class="form-group"> 
			<%= f.text_field :activity_name, placeholder: "Activity", class: "form-control"  %>
			<%= f.text_area :description, placeholder: "Description", class: "form-control" %>
			<%= f.text_field :category, placeholder: "Category", class: "form-control" %>
			<%= f.text_field :location, placeholder: "Location", class: "form-control"%>
			<%= f.submit class: "btn" %>

			</div>
			<% end  %>


		</div>
		<div class="col-sm-4 col-lg-3 well">
			<h5>Sleep</h5>
		</div>
		<div class="col-sm-4 col-lg-3 well">
			<h5>Play</h5>
			<% @itinerary.items.each do |i| %>
			<%= i.activity_name %> <br>
			<%= i.description %> <br>
			<%= i.category %> <br>
			<%= i.location %> <br>
			<% end %>
		</div>
	</div>
</div>
<script>
function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 37.74, lng: -122.45},
    zoom: 13
  });
  var input = /** @type {!HTMLInputElement} */(
      document.getElementById('pac-input'));

  var types = document.getElementById('type-selector');
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    anchorPoint: new google.maps.Point(0, -29)
  });
  
  var options = $.extend({
    scrollwheel: false,
    navigationControl: false,
    mapTypeControl: false,
    scaleControl: false,
    draggable: false,
    mapTypeId: google.maps.MapTypeId.ROADMAP
	}, options);
  
  autocomplete.addListener('place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }

    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    radioButton.addEventListener('click', function() {
      autocomplete.setTypes(types);
    });
  }

  setupClickListener('changetype-all', []);
  setupClickListener('changetype-address', ['address']);
  setupClickListener('changetype-establishment', ['establishment']);
  setupClickListener('changetype-geocode', ['geocode']);
}
</script>